serviceAccount:
  # Specifies whether a service account should be created
  create: true
  # Automatically mount a ServiceAccount's API credentials?
  automount: true
  # Annotations to add to the service account
  annotations: {}
  # The name of the service account to use.
  # If not set and create is true, a name is generated using the fullname template
  name: serviceaccount.adaptive-ml.com

# Example using external secrets hosted on AWS Secrets Manager
# https://github.com/external-secrets/external-secrets
# You must pre-install the operator as a prerequisite
externalSecret:
  enabled: true
  spec:
    provider:
      aws:
        service: SecretsManager
        region: us-west-2 # Replace with your secret region
  data:
    # Postgres database connection url (ex: "postgres://username:password@db_adress:5432/db_name")
    dbUrl:
      remoteRef:
        key: path/to/dbUrl # Name of external secret
        property: dbUrl # External secret key; remove if secret is plain text
    # Secret used to sign cookies. Must be the same on all servers of a cluster and >= 64 chars
    cookiesSecret:
      remoteRef:
        key: path/to/cookiesSecret
        property: cookiesSecret # External secret key for cookie signing; remove if secret is plain text
    # S3 bucket for model registry (ex. "s3://bucket-name/folder")
    modelRegistryUrl:
      remoteRef:
        key: path/to/modelRegistryUrl
        property: modelRegistryUrl # External secret key for model registry URL; remove if secret is plain text
    # Use same bucket as above and can use a different prefix (ex. "s3://bucket-name/shared")
    sharedDirectoryUrl:
      remoteRef:
        key: path/to/sharedDirectoryUrl
        property: sharedDirectoryUrl # External secret key for shared directory URL; remove if secret is plain text
    # OIDC provider details for auth; see chart README for details on required secret structure
    oidcProviders:
      remoteRef:
        key: path/to/oidcProviders
        property: oidcProviders # External secret key for OIDC provider config; remove if secret is plain text

auth:
  default_role: "admin"
  session:
    # Set the secure flag for the session cookie: they are only valid on https and localhost
    # Should be true in prod - (use false if the app is accessed through insecure http)
    secure: true
    expiration_seconds: 518400 # 6 days
  admins: []

containerRegistry: 111111111111.dkr.ecr.us-west-2.amazonaws.com # Adaptive container registry you have been granted access to

harmony:
  image:
    repository: adaptive-repository # Adaptive container repository you have been granted access to
    tag: harmony:latest # Harmony image tag
    pullPolicy: Always

  replicaCount: 1

  # Should be equal to, or a divisor of the # of GPUs on each node
  # If you are not deploying on GPU, comment out the line
  gpusPerReplice: 8

  nodeSelector: # Uncomment to deploy harmony on specify EKS node group or GKE node pool
    {}
    # eks.amazonaws.com/nodegroup: gpu-node-group-name
    # cloud.google.com/gke-accelerator: a2-ultragpu-4g

  # adjust to your deployment server specs and model size requirements
  resources:
    limits:
      cpu: 7
      memory: 64Gi
    requests:
      cpu: 7
      memory: 60Gi

  podAnnotations:
    ingest-adaptive-logs: "true"
  podLabels: {}

controlPlane:
  image:
    repository: adaptive-repository # Adaptive container repository you have been granted access to
    tag: control-plane:latest # Control plane image tag
    pullPolicy: Always

  servicePort: 80 # Port where app will be exposed

  # Full url of the application as visible from a web browser. Important if you use SSO
  rootUrl: "http://localhost:9000"
  # rootUrl: "https://YOUR_URL"

  # Update the DB schema; defaults to True unless explictly False
  runDbMigrations: true

  nodeSelector: {}

  # Uncomment to allow control plane to be scheduled on GPU nodes
  tolerations:
  #   - key: "nvidia.com/gpu"
  #     operator: "Exists"
  #     effect: "NoSchedule"

  podAnnotations:
    ingest-adaptive-logs: "true"
  podLabels: {}