# serviceAccountName: adaptive-service-account

# Example using external secrets hosted on AWS Secrets Manager
# If `externalSecret.enabled: true`, External Secrets Operator will be deployed
# https://github.com/external-secrets/external-secrets
externalSecret:
  enabled: true
  spec:
    provider:
      aws:
        service: SecretsManager
        region: us-west-2 # Replace with secret region
  data: 
    # Postgres database connection url (ex: "postgres://username:password@db_adress:5432/db_name")
    dbUrl:
      remoteRef:
        key: remote-key-value-secret-name # Name of external key-value secret 
        property: dbUrl # External secret key for database url
    # Secret used to sign cookies. Must be the same on all servers of a cluster and >= 64 chars
    cookiesSecret:
      remoteRef:
        key: remote-key-value-secret-name
        property: cookiesSecret # External secret key for cookie signing
    # Plain text .toml file for control plane auth config (see reference `adaptive_configs/config.toml`)
    controlPlaneAuthConfig:
      remoteRef:
        key: remote-plain-text-secret-name # Name of external plain text secret
    # Any object storage service interoperable with s3 apis (ex. "s3://bucket-name/folder")
    modelRegistryUrl:
      remoteRef:
        key: remote-key-value-secret-name
        property: modelRegistryUrl # External secret key for model registry Url

    # If your model registry is not on S3 and/or you do not authenticate by assuming an IAM role, you need extra env vars
    # objectStorageConfig:
    #   awsAccessKeyId: 
    #     remoteRef:
    #       key: remote-key-value-secret-name
    #       property: AWS_ACCESS_KEY_ID
    #   awsSecretAccessKey:
    #     remoteRef:
    #       key: remote-key-value-secret-name
    #       property: AWS_SECRET_ACCESS_KEY
    #   awsEndpointUrlS3:
    #     remoteRef: 
    #       key: remote-key-value-secret-name
    #       property: AWS_ENDPOINT_URL_S3


containerRegistry: # Adaptive container registry you have been granted access to


harmony:
  image:
    repository: # Adaptive container repository you have been granted access to
    tag: # Harmony image tag
    pullPolicy: Always

  replicaCount: 1

  # This should match the machine type you are deploying in
  # If you are not deploying on GPU, comment out the line
  gpusPerNode: 8

  nodeSelector: # Uncomment to deploy harmony on specify EKS node group or GKE node pool
    {}
    # eks.amazonaws.com/nodegroup: gpu-node-group-name
    # cloud.google.com/gke-accelerator: a2-ultragpu-4g 

  resources:
    limits:
      cpu: 7
      memory: 64Gi
    requests:
      cpu: 7
      memory: 60Gi

  podAnnotations: {}
  podLabels: {}


controlPlane:
  image:
    repository: # Adaptive container repository you have been granted access to
    tag: # Control plane image tag
    pullPolicy: Always

  servicePort: 80 # Port where app will be exposed
  
  # Full url of the application as visible from a web browser. Important if you use SSO
  rootUrl: "http://localhost:1234"
  # rootUrl: "https://YOUR_URL"

  # Update the DB schema; defaults to True unless explictly False
  runDbMigrations: true

  nodeSelector:
    {}

  # Uncomment to allow control plane to be scheduled on GPU nodes
  tolerations:
  #   - key: "nvidia.com/gpu"
  #     operator: "Exists"
  #     effect: "NoSchedule"

  podAnnotations: {}
  podLabels: {}