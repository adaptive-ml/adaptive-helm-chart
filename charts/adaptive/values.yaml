# serviceAccountName: adaptive-service-account

secrets:
  # Any object storage service interoperable with s3 apis
  modelRegistryUrl: s3://bucket-name/model_registry
  # Use same bucket as above and can use a different prefix
  sharedDirectoryUrl: s3://bucket-name/shared

  # If your model registry is not on S3 and/or you do not authenticate by assuming an IAM role, you need extra env vars
  objectStorageConfig:
    # AWS_ACCESS_KEY_ID: "ACCESS_KEY"
    # AWS_SECRET_ACCESS_KEY: "SECRET"
    # AWS_ENDPOINT_URL_S3: "STORAGE_URL"

  # Postgres database connection string
  dbUrl: postgres://username:password@db_adress:5432/db_name
  # Secret used to sign cookies. Must be the same on all servers of a cluster and >= 64 chars
  cookiesSecret: "change-me-secret-db40431e-c2fd-48a6-acd6-854232c2ed94-01dd4d01-dr7b-4315" # Must be >= 64 chars

  auth:
    oidc:
      providers:
        # Name of your OpenId provider displayed in the ui
        - name: "Google"
          # Key of your provider, the callback url will be '<rootUrl>/api/v1/auth/login/<key>/callback'
          key: "google"
          issuer_url: "https://accounts.google.com" # openid connect issuer url
          client_id: "replace_client_id" # client id
          client_secret: "replace_client_secret" # client_secret, optional
          scopes: ["email", "profile"] # scopes required for auth, requires email and profile
          # true if your provider supports pkce (recommended)
          pkce: true
          # if true, user account will be created if it does not exist
          allow_sign_up: true

auth:
  default_role: "admin"
  session:
    # Set the secure flag for the session cookie: they are only valid on https and localhost
    # Should be true in prod - (use false if the app is accessed through insecure http)
    secure: true
    expiration_seconds: 518400 # 6 days
  admins: []

containerRegistry: 111111111111.dkr.ecr.us-west-2.amazonaws.com # Add the Adaptive Registry you have been granted access to

harmony:
  image:
    repository: adaptive-repository # Add the Adaptive Repository you have been granted access to
    tag: harmony:latest # Add the harmony image tag
    pullPolicy: Always

  replicaCount: 1

  # This should match the machine type you are deploying in
  # If you are not deploying on GPU, comment out the line
  gpusPerNode: 8

  nodeSelector: # Uncomment to deploy harmony on specify EKS node group or GKE node pool
    {}
    # eks.amazonaws.com/nodegroup: gpu-node-group-name
    # cloud.google.com/gke-accelerator: a2-ultragpu-4g
  
  # Adjust to your deployment server specs and model size requirements
  resources:
    limits:
      cpu: 7
      memory: 64Gi
    requests:
      cpu: 7
      memory: 60Gi

  podAnnotations: {}
  podLabels: {}
  extraEnvVars: {}

controlPlane:
  image:
    repository: adaptive-repository # Add the Adaptive Repository you have been granted access to
    tag: control-plane:latest # Add the control plane image tag
    pullPolicy: Always

  servicePort: 80 # Port where app will be exposed

  # Full url of the application as visible from a web browser. Important if you use SSO
  rootUrl: "http://localhost:9000"
  # rootUrl: "https://YOUR_URL"

  # Update the DB schema; defaults to True unless explictly False
  runDbMigrations: true

  podAnnotations: {}
  podLabels: {}

  nodeSelector: {}

  # Uncomment to allow control plane to be scheduled on GPU nodes
  tolerations:
  #   - key: "nvidia.com/gpu"
  #     operator: "Exists"
  #     effect: "NoSchedule"

  extraEnvVars: {}
